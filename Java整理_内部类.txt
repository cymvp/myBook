非静态内部类不能有static成员,因为非静态内部类只能通过实例化访问.
内部类就像是外部类的一个成员;局部内部类不能有访问控制.

静态内部类可以有public, private, protected,默认等权限.
静态内部类只能访问外部类的静态方法.

静态方法中定义的内部类自动就是静态内部类,这是不能加static修饰.

内部类:
  Java的内部类定义在外部类中. 内部类的方法可以访问相应外部类对象的域(无论是private还是其它权限的).
  
  内部类的原理是: 内部类的对象有一个指向创建它的外部类对象的引用.这个引用在内部类的构造方法中，被编译器隐式赋值.
  
  class.this用于引用外部类; object.new用于显示创建内部类; outclass.internalclass可以用于在外部类引用内部类.
  
  外部访问某个类的内部类，访问原则还是与类的方法和域相同: private不能访问，protected的同包和子类可以访问，等等.
  
  内部类的方法之所以能够访问到外部类的域，是因为编译器在内部类中访问外部类的域的地方插入了一些代码:调用外部类的default访问权限的static access$0()方法。
所以内部类有此特权.
  而如果内部类的对象在别的类的方法中调用外部类的域，是不行的，因为编译器不做支持.
  
局部类:
  定义在函数内部的类. 局部类不能被外面访问，所以没有访问限定词. 局部类可以访问函数的局部变量和参数，这点内部类不行. 实现的原理就是内部类对象会保存一份局部变量的拷贝.
  
  声明在接口中的内部类自动变为public static,和接口声明的常量一样(少final).  