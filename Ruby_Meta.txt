Contants: 任何大写字母开头的名字，包括class和module，都是常量.

Java和C#的class也是Class的一个instance。

Ojbect的class是Class. Module的superclass是Object. Class的class是它自己.

class代表作为一个对象，它的类是什么. Class代表一个具体的类. superclass代表作为一个类，它的父类是什么.

Module#module_function可以复制一份模块实例方法变为模块方法.

include的作用是Maxin，也就是将Mudule的类变量(@@pi),类常量(PI),实例方法，maxin到相应的类中.

class的superclass的chain: MyClass->Ojbect->Kernel->BasicObject


关于Block:

Block是位于花括号里的代码. Block可以保存当前上下文中的变量.在Block调用时，可以进行传递.

有三种方法可以将Block转化为Proc对象:
1 def meth1(p1, p2, &block)
  end
  
  meth1(1,2){"a block"}  ---->将Block传递给block.可以传递meth1调用时的上下文中的变量.
  
2 block = Proc.new{"a block"}

3 block = lambda{"a block"}

Proc.new和lambda的区别是: 

   使用lambda构造的Proc对象, 在Proc#call调用时，Block里的return语句从Block中返回，Block就像是一个函数.
   
   使用Proc.new构造的对象, 在Proc#call调用时，Block里的return语句从当前上下文返回，Block像是一个C语言的Macro.
   
&符号：
 1 在方法定义时，意味着这个参数必需传一个Block或者Proc对象.
 
 2 在方法调用时, 意味着将一个Proc对象转化为一个Block.  
 
 
关于Class Definitions:
 
 self代表当前的对象是什么.
 
 

可以为某个object定义一个method,称为Singleton Method. 
  定义方式:def str.title?; end
  查询方式: str.singleton_methods
  
这是个在class中定义method等价的，因为其实class也是Class的一个object，class名字只不过是引用这个ojbect的一个常量而已.

def obj.a_singleton_method; end
def MyClass.another_class_method; end  /* Monkey Patch */

如果在class的定义中，那么当前的上下文就是这个class(一个obj),self就是这个class(一个obj).所以也可以:
class MyClass
  def self.yet_another_class_method; end
end

Class Macros:

类似attr_accessor()的method. 这些方法定义在Module中,所以self是module或者class的作用域都可以调用.

例举了Class Macros的实现原理以及使用情况:实现方式就是在这些Class Macros中使用define_method()和send()定义相应的method.

Eigenclass:

   class method方法定义的三种方法:
   
   1.
    class MyClass
      def self.my_method; end
    end
    
    2. def MyClass.my_other_method; end

    3.
    class MyClass
      class << self
        def my_method; end
      end
    end
    
    class method都是存放在Eigenclass中.
    
   一个object(包括class)可以使用的method，都是由其class来定义出的instance method；class定义出来的method都是存放于该类的eigenclass中,eigenclass是该类的class.
   由上可知,如果需要class能够访问Class中的instance method,那么Class必需处于eingenclass的顶端，在#BasicObject类的上面. 这样Class就看似是所有class的class.
   
   Class也可以定义class method(区别于instance method, class method是被self调用的), 这些class method就只能被Class自己调用(不能被其他class调用).+

   
   Module method和class method相似，也是存在Module自己的eigenclass中. 只有instance method参与其object的eigenclass链.所以可知, Module method才可以被include.
   
   同样的，object也可以像class一样, include Module instance method.
   
alias:
   alias是一个关键字，不是一个method.
   
   当重定义一个method时，旧的method仍然存在，只是method的名字引用到了新method上. 如果为就method设置了alias，那么可以通过alias引用旧method.
   
   一个用处:如果你想修改一个method,为它增加一些功能，但是老的方法又要保留供新方法调用,那么使用alias比较方便(其实重定义一下老方法，然后新写一个方法被老方法调用即可).
   
   在class A的定于域中, self就是A本身，如果不加def A.fun 中的A. ,那么在class A中定义的方法就是A的instance method.
   
binding:
   binding方法返回当前的上下文环境，也就保存了当前环境的变量等信息.类似于block.包括self等信息都保存下来.
   
eval():
  eval()方法的第一个参数是字符串，然后对该字符串进行运算.相当于C语言宏的##，我感觉.