
finally的执行: 当在try{}中有return语句时，只是将结果写入栈中,然后去执行finally的语句.当finally有return时，会改写存入栈中的结果.


  
异常:
  对于被检查异常,编译器要求用try catch包住，或者抛出. 对于非被检查异常,会直接产生.   不过try catch也可以捕获非被检查异常.
  
  程序员应该应付所有的"已检查异常"，而对于Java的内部错误，无能为力;对于RunTime Execption之类的"未检查异常"，应该作为是Bug来修改程序，而不是处理异常.

子类覆盖父类的方法，那么子类的方法所声明的已检查异常一定不能超过父类的方法声明的异常.

一个方法必须声明所有它可能抛出的异常.

抛出异常的步骤: 1 找到一个合适的异常类; 2 实例化一个这个类的对象; 3 将对象抛出.

自己定义一个异常类: 继承自Throwable.

Java只能抛出继承自Throwable的类对象.

调用function时，可能获得的异常类数目 = 该被调用function声明的异常类型数

覆盖父类的function时, 抛出的异常数加自己需处理的异常数 = 父类function声明的异常类型数.

finally子句: 在try和catch后都会执行的语句.

finally中最好不要有return语句,否则会执行两次return.

如果finally中又抛出了异常,那么会覆盖try中抛出的给调用者的异常.

抛出异常的地方: try块中; 显式throw一个异常.

抛给本function的调用者方式: 
   1 try中产生一个异常，但是不用catch语句接收.
   2 catch语句中产生一个异常.
   3 catch语句中显式throw出一个异常.